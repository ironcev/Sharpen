using System.Collections.Generic;
using System.Linq;
using Microsoft.CodeAnalysis;

namespace Sharpen.Engine.Analysis
{
    // We have a slight terminology issue here. Users talk about files.
    // Roslyn talks about documents. For the code identifiers we will
    // use the term documents. For the user messages we will use files.
    internal sealed class MultipleDocumentsScopeAnalyzer : BaseScopeAnalyzer
    {
        private readonly IReadOnlyCollection<Document>? documents;

        public MultipleDocumentsScopeAnalyzer(IReadOnlyCollection<Document>? documents)
        {
            this.documents = documents;
        }

        protected override string? GetCanExecuteScopeAnalysisErrorMessage()
        {
            if (documents == null || documents.Count <= 0)
            {
                return "There are no files selected or the selected files do not belong to the solution.";
            }

            // We can still have a situation that users call the analysis on a custom generated
            // file that has the <auto-generated> comment. In that case the analysis will be skipped
            // by the engine and will always return zero results without any warning provided to the
            // user that the analysis will in fact not run.
            // So far we will leave it like this. It's an unlikely corner case and we do not want to
            // add performance penalty on regular case by double-checking here if the file content
            // is generated.
            if (!documents.Any(DocumentShouldBeAnalyzed))
            {
                return "The selected files do not contain any C# files that could be analyzed.";
            }

            return null;
        }

        protected override string ScopeAnalysisHelpMessage => 
            "To start file analysis, select at least one non-generated C# file that belongs to the solution.";

        protected override IEnumerable<Document> GetDocumentsToAnalyze()
        {
            return documents ?? Enumerable.Empty<Document>();
        }
    }
}